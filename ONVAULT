#!/bin/bash

# signals bash to stop execution on any fail
set -e

# allow everriding default VAULT_HOST at runtime
# otherwise will get the docker bridge ip network
: ${VAULT_HOST:=$(ip route|awk '/default/{print $3}')}

# allow overriding (probably trough Docker Link) default VAULT_PORT at runtime
: ${VAULT_PORT:=tcp://${VAULT_HOST}:14242}

# allow overriding default VAULT_URI at runtime
: ${VAULT_URI:=${VAULT_PORT/tcp/http}}

# allow overriding default VAULT_SSH_KEY at runtime
: ${VAULT_SSH_KEY:=id_rsa}

# allow multiple dot directories to be managed
: ${VAULT_DIRS:=ssh}

: ${VAULT_IMAGE:=dockito/vault}

# parse arguments
while [[ "$#" > 1 ]]; do case $1 in
    --disable-pwd) DISABLE_PASSWORD="$2";;
    *) break;;
  esac; shift; shift
done

log () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color
  echo -e "${GREEN}[Dockito Vault]${NC} $@"
}

# don't go through proxy for accessing vault
no_proxy_old="$no_proxy"
export no_proxy="$VAULT_HOST"

if ! curl --connect-timeout 1 -s "${VAULT_URI}/_ping"; then
  COUNTER=0
  echo "Waiting 10s for ${VAULT_IMAGE} to be ready..."
  while ! curl --connect-timeout 1 -s "${VAULT_URI}/_ping" && [ $COUNTER != 10 ]; do
    sleep 1
    COUNTER=$[$COUNTER +1]
  done
fi

if curl --connect-timeout 1 -s "${VAULT_URI}/_ping"; then
  log "Downloading private keys..."
  tmp_vault=~/".vault-backup-$(date +%s)"
	mkdir $tmp_vault
  for vault_dir in $VAULT_DIRS; do
    if [[ -e ~/.${vault_dir} ]]; then
      mv ~/.${vault_dir} ${tmp_vault}
    fi
		mkdir ~/.${vault_dir}

    curl -s "${VAULT_URI}/${vault_dir}.tgz" | tar -C ~/.${vault_dir}/ -zxf -
    chown -f `whoami` ~/.${vault_dir}/* || true
    chmod -f 600 ~/.${vault_dir}/* || true
  done

  log "Using ssh key: $VAULT_SSH_KEY"
  if [[  "$VAULT_SSH_KEY" != "id_rsa" ]]; then
    # configure the ssh to any host to use this ssh key
    echo -e "\nHost *\nIdentityFile ~/.ssh/$VAULT_SSH_KEY" >> ~/.ssh/config
  fi

  if [[ "$DISABLE_PASSWORD" != "" ]]; then
    ssh-keygen -p -P $DISABLE_PASSWORD -N "" -f ~/.ssh/$VAULT_SSH_KEY
  fi

  # restore 'no_proxy' for executing the actual command
  export no_proxy="$no_proxy_old"

  log "Executing command: $@"
  eval $@

  log "Removing private keys..."
  for vault_dir in $VAULT_DIRS; do
    rm -rf ~/.${vault_dir}
    if [[ -e ${tmp_vault}/.${vault_dir} ]]; then
      mv ${tmp_vault}/.${vault_dir} ~
    fi
  done
  rmdir $tmp_vault
else
  log "ERROR: Start the ${VAULT_IMAGE} container before using ONVAULT!"
  document_args=""
	if [[ "$VAULT_DIRS" != "ssh" ]]; then
		document_args="${document_args} -e VAULT_DIRS='${VAULT_DIRS}'"
	fi
  if [[ "$VAULT_PORT" = "tcp://${VAULT_HOST}:14242" ]]; then
    document_args="${document_args} -p ${VAULT_HOST}:14242:3000"
  fi
  for vault_dir in $VAULT_DIRS; do
    document_args="${document_args} -v ~/.${vault_dir}:/vault/.${vault_dir}"
  done

  log "ex: docker run -d${document_args} ${VAULT_IMAGE}"
  exit 1
fi
